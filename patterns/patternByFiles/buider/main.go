package main

/*
Паттерн «Строитель», является порождающим,
т.е. отвечает за удобное и безопасное создание новых объектов или даже целых семейств объектов.
Так, «Строитель»:
1)  Отделяет конструирование сложного объекта от его представления,
так что в результате одного и того же процесса конструирования могут получаться разные представления,
при помощи «разделения» создания объекта на конкретные шаги;
2) Конструирование объекта осуществляется внешними по отношению к нему сущностями,
называемыми строителями. Т.е. каждый такой строитель выполняет конструирование объекта по-своему (это шаги из п. 1)
3) Позволяет избавиться от конструктора со множеством опциональных параметров.
Пример: каждый автомобиль может иметь разную комплектацию:
1) Руль – кожаный или полиуретановый;
2) Сиденье – кожаное или тканевое;
3) Аудио – есть/нет;
4) Кондиционер – есть/нет.
Состав опций не меняется, а их свойства - разные =>
необходимо для каждой комплектации реализовать свой набор свойств при производстве автомобиля.
Так:
1) Создаём сам Builder (CarBuilder) – интерфейс, который будет «производить» автомобиль, сохраняя набор свойств, но меняя их «наполнение»;
2) Функция getCarBuilder() – позволяет «выбрать» нужного CarBuilder по ключевому слову;
3) Структура standartCar, набор её методов и конструктор – это конкретная реализация комплектации с конкртным набором свойств (реализует CarBuilder).
Аналогично и luxeCar
4) director – управляет Builderom. Получая сведение о конкретном CarBuilder, который нужен выдаёт «задание» на производство конкретного автомобиля.

«Плюсы использования»:
1) Создаём объект по шагам;
2) Используем один и тот же код для разных объектов;

«Минусы использования»:
1) Привязка к конкретным структурам строителей;
2) Сложный код.
*/

import (
	"builder/builder"
	"builder/director"
	"fmt"
)

func main() {

	standartCarProduce := builder.GetCarBuilder("standart")
	directorStandart := director.NewDirector(standartCarProduce)
	standartCar := directorStandart.ProduceCar()

	luxeCarProduce := builder.GetCarBuilder("luxe")
	directorLuxe := director.NewDirector(luxeCarProduce)
	luxeCar := directorLuxe.ProduceCar()

	fmt.Println(standartCar)
	fmt.Println(luxeCar)
}
